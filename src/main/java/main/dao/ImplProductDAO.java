package main.dao;

import main.model.Product;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.rowset.SqlRowSet;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;
import javax.annotation.Resource;
import javax.sql.RowSet;
import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Optional;

@Component("productDao")
public class ImplProductDAO implements ProductDAO {
    private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd");

    @Resource(name = "jdbcTemplate")
    private JdbcTemplate jdbcTemplate;

    @PostConstruct
    private void init() {

        String createTable =
                "create table product " +
                        "(prdt_id integer generated by default as identity(start with 1, increment by 1),\n" +
                        "name varchar(512),\n" +
                        "description varchar(1024),\n" +
                        "create_date date not null,\n" +
                        "place_storage integer,\n" +
                        "reserved boolean,\n" +
                        "constraint prdt_pk primary key (prdt_id))";

        String insertQuery =
                "insert into product(name, description, create_date, place_storage, reserved) " +
                        "values('Пылесос', 'Описание пылесоса', sysdate, 2, false);\n" +
                        "insert into product(name, description, create_date, place_storage, reserved) " +
                        "values('Телевизор', 'Описание телевизора', sysdate, 3, false);\n" +
                        "insert into product(name, description, create_date, place_storage, reserved) " +
                        "values('Смартфон', 'Описание смартфона', sysdate, 5, true);\n" +
                        "insert into product(name, description, create_date, place_storage, reserved) " +
                        "values('Смартфон', 'Описание смартфона', sysdate, 31, false);\n" +
                        "insert into product(name, description, create_date, place_storage, reserved) " +
                        "values('Шкаф', 'Описание шкафа', sysdate, 2, true);\n" +
                        "insert into product(name, description, create_date, place_storage, reserved) " +
                        "values('Утюг', 'Описание утюга', sysdate, 2, true);";


        jdbcTemplate.update(createTable);
        jdbcTemplate.update(insertQuery);
    }

    @Override
    public List<Product> selectAllProduct() {
        String sqlQuery = "select * from product;";

        List<Product> products = jdbcTemplate.query(sqlQuery,
                (resultSet, i) -> {
                    int id = resultSet.getInt("prdt_id");
                    String name = resultSet.getString("name");
                    String description = resultSet.getString("description");
                    Date createDate = resultSet.getDate("create_date");
                    int placeStorage = resultSet.getInt("place_storage");
                    boolean reserved = resultSet.getBoolean("reserved");


                    Product product = new Product();
                    product.setId(id);
                    product.setName(name);
                    product.setDescription(description);
                    product.setCreateDate(DATE_FORMAT.format(createDate));
                    product.setPlaceStorage(placeStorage);
                    product.setReserved(reserved);

                    return product;
                }
        );
        return products;
    }

    @Override
    public Optional<Product> selectProduct(int id) {
        String sqlQuery = "select * from product where prdt_id = ?;";
        SqlRowSet sqlRowSet = jdbcTemplate.queryForRowSet(sqlQuery, id);

        String columnId = "prdt_id";
        String columnName = "name";
        String columnDescription = "description";
        String columnCreateDate = "create_date";
        String columnPlaceStorage = "place_storage";
        String columnReserved = "reserved";

        String name = "";
        String description = "";
        Date createDate = null;
        int placeStorage = 0;
        boolean reserved = false;

        if (existsSqlRow(sqlRowSet)) {
            System.out.println(sqlRowSet.getString(columnId));
            id = sqlRowSet.getInt(columnId);
            name = sqlRowSet.getString(columnName);
            description = sqlRowSet.getString(columnDescription);
            createDate = sqlRowSet.getDate(columnCreateDate);
            placeStorage = sqlRowSet.getInt(columnPlaceStorage);
            reserved = sqlRowSet.getBoolean(columnReserved);
        }
        Product product = createDate != null ?
                new Product(id, name, description, DATE_FORMAT.format(createDate), placeStorage, reserved) : null;

        return Optional.ofNullable(product);
    }

    private boolean existsSqlRow(SqlRowSet sqlRowSet) {
        return sqlRowSet.next();
    }

    @Override
    public int addProductAndGetId(Product product) {
        insertProduct(product);
        setIdToLastInsertedProduct(product);

        return product.getId();
    }

    private void insertProduct(Product product) {
        String name = product.getName();
        String description = product.getDescription();
        String createDate = product.getCreateDate();
        int placeStorage = product.getPlaceStorage();
        boolean reserved = product.isReserved();

        String sqlQuery = "insert into product(name, description, create_date, place_storage, reserved)" +
                "values(?, ?, ?, ?, ?);";

        executeInsert(sqlQuery, name, description, createDate, placeStorage, reserved);
    }

    private void executeInsert(String sqlQuery, Object... args) {

        String name = (String) args[0];
        String description = (String) args[1];
        String createDate = (String) args[2];
        int placeStorage = (int) args[3];
        boolean reserved = (Boolean) args[4];

        try {

            jdbcTemplate.update(sqlQuery, name, description, DATE_FORMAT.parse(createDate), placeStorage, reserved);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    private void setIdToLastInsertedProduct(Product product) {
        int id = getIdOfTheLastProductInserted();
        product.setId(id);
    }

    private int getIdOfTheLastProductInserted() {
        String sqlQuery = "select max(prdt_id) prdt_id from product;";
        SqlRowSet sqlRowSet = jdbcTemplate.queryForRowSet(sqlQuery);

        int id = 0;
        String column = "prdt_id";
        if (existsSqlRow(sqlRowSet)) {
            id = sqlRowSet.getInt(column);
        }
        return id;
    }

    @Override
    public int updateProduct(Product product) {
        int id = product.getId();
        String name = product.getName();
        String description = product.getDescription();
        String createDate = product.getCreateDate();
        int placeStorage = product.getPlaceStorage();
        boolean reserved = product.isReserved();

        String sqlQuery =
                "update product set name = ?, description= ?, " +
                        "create_date = ?, place_storage = ?, " +
                        "reserved = ? where prdt_id = ?";

        return executeUpdate(sqlQuery, name, description, createDate, placeStorage, reserved, id);
    }

    private int executeUpdate(String sqlQuery, Object... args) {
        String name = (String) args[0];
        String description = (String) args[1];
        String createDate = (String) args[2];
        int placeStorage = (int) args[3];
        boolean reserved = (Boolean) args[4];
        int id = (int) args[5];

        int jdbcCode = 0;
        try {
            jdbcCode = jdbcTemplate.update(sqlQuery, name, description, DATE_FORMAT.parse(createDate), placeStorage, reserved, id);
        } catch (ParseException e) {
            e.printStackTrace();
        }

        return jdbcCode;
    }

    @Override
    public int deleteProduct(int id) {
        String sqlQuery = "delete from product where prdt_id = ?;";

        return jdbcTemplate.update(sqlQuery, id);
    }
}
